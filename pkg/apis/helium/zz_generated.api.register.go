/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by apiregister-gen. Do not edit it manually!

package helium

import (
	"fmt"
	"github.com/kubernetes-incubator/apiserver-builder/pkg/builders"
	corev1 "k8s.io/api/core/v1"
	extensionsv1beta1 "k8s.io/api/extensions/v1beta1"
	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/endpoints/request"
	"k8s.io/apiserver/pkg/registry/rest"
)

var (
	InternalJobtype = builders.NewInternalResource(
		"jobtypes",
		func() runtime.Object { return &Jobtype{} },
		func() runtime.Object { return &JobtypeList{} },
	)
	InternalJobtypeStatus = builders.NewInternalResourceStatus(
		"jobtypes",
		func() runtime.Object { return &Jobtype{} },
		func() runtime.Object { return &JobtypeList{} },
	)
	InternalBatchJobtypeREST = builders.NewInternalSubresource(
		"jobtypes", "batch",
		func() runtime.Object { return &Batch{} },
	)
	InternalInteractJobtypeREST = builders.NewInternalSubresource(
		"jobtypes", "interact",
		func() runtime.Object { return &Interact{} },
	)
	InternalStreamingJobtypeREST = builders.NewInternalSubresource(
		"jobtypes", "streaming",
		func() runtime.Object { return &Streaming{} },
	)
	InternalTrainingJobtypeREST = builders.NewInternalSubresource(
		"jobtypes", "training",
		func() runtime.Object { return &Training{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("helium.aipg.intel.com").WithKinds(
		InternalJobtype,
		InternalJobtypeStatus,
		InternalBatchJobtypeREST,
		InternalInteractJobtypeREST,
		InternalStreamingJobtypeREST,
		InternalTrainingJobtypeREST,
	)

	// Required by code generated by go2idl
	AddToScheme        = ApiVersion.SchemaBuilder.AddToScheme
	SchemeBuilder      = ApiVersion.SchemaBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

// +genclient=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Jobtype struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   JobtypeSpec
	Status JobtypeStatus
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Training struct {
	metav1.TypeMeta
	metav1.ObjectMeta
}

type JobtypeStatus struct {
	State int
}

type JobtypeSpec struct {
	Template    *corev1.PodSpec
	IngressSpec extensionsv1beta1.IngressSpec
	ServiceSpec corev1.ServiceSpec
	ScaleSpec   extensionsv1beta1.ScaleSpec
	ConfigSpec  ConfigSpec
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Streaming struct {
	metav1.TypeMeta
	metav1.ObjectMeta
}

type ConfigSpec struct {
	NeonRepoSpec    NeonRepoSpec
	SecuritySpec    SecuritySpec
	StreamDataSpec  StreamDataSpec
	KryptonRepoSpec KryptonRepoSpec
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Interact struct {
	metav1.TypeMeta
	metav1.ObjectMeta
}

type KryptonRepoSpec struct {
	RepoURL             string
	Commit              string
	KryptonImage        string
	KryptonSidecarImage string
}

type StreamDataSpec struct {
	ModelPRM         string
	ModelPath        string
	DatasetPath      string
	ExtraFilename    string
	CustomCodeURL    string
	CustomCommit     string
	AWSPath          string
	AWSDefaultRegion string
	StreamID         int
	StreamName       string
}

type SecuritySpec struct {
	PresignedToken string
	JWTToken       string
}

type NeonRepoSpec struct {
	RepoUrl string
	Commit  string
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Batch struct {
	metav1.TypeMeta
	metav1.ObjectMeta
}

//
// Jobtype Functions and Structs
//
// +k8s:deepcopy-gen=false
type JobtypeStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type JobtypeStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type JobtypeList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Jobtype
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type BatchList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Batch
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type InteractList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Interact
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type StreamingList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Streaming
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type TrainingList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Training
}

func (Jobtype) NewStatus() interface{} {
	return JobtypeStatus{}
}

func (pc *Jobtype) GetStatus() interface{} {
	return pc.Status
}

func (pc *Jobtype) SetStatus(s interface{}) {
	pc.Status = s.(JobtypeStatus)
}

func (pc *Jobtype) GetSpec() interface{} {
	return pc.Spec
}

func (pc *Jobtype) SetSpec(s interface{}) {
	pc.Spec = s.(JobtypeSpec)
}

func (pc *Jobtype) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *Jobtype) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc Jobtype) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store Jobtype.
// +k8s:deepcopy-gen=false
type JobtypeRegistry interface {
	ListJobtypes(ctx request.Context, options *internalversion.ListOptions) (*JobtypeList, error)
	GetJobtype(ctx request.Context, id string, options *metav1.GetOptions) (*Jobtype, error)
	CreateJobtype(ctx request.Context, id *Jobtype) (*Jobtype, error)
	UpdateJobtype(ctx request.Context, id *Jobtype) (*Jobtype, error)
	DeleteJobtype(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewJobtypeRegistry(sp builders.StandardStorageProvider) JobtypeRegistry {
	return &storageJobtype{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageJobtype struct {
	builders.StandardStorageProvider
}

func (s *storageJobtype) ListJobtypes(ctx request.Context, options *internalversion.ListOptions) (*JobtypeList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*JobtypeList), err
}

func (s *storageJobtype) GetJobtype(ctx request.Context, id string, options *metav1.GetOptions) (*Jobtype, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*Jobtype), nil
}

func (s *storageJobtype) CreateJobtype(ctx request.Context, object *Jobtype) (*Jobtype, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, false)
	if err != nil {
		return nil, err
	}
	return obj.(*Jobtype), nil
}

func (s *storageJobtype) UpdateJobtype(ctx request.Context, object *Jobtype) (*Jobtype, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object, builders.Scheme))
	if err != nil {
		return nil, err
	}
	return obj.(*Jobtype), nil
}

func (s *storageJobtype) DeleteJobtype(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}
